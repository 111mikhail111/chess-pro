import { type BoardPosition } from "./Board";

export type PieceType =
  | "king"
  | "pawn"
  | "knight"
  | "archer"
  | "cannon"
  | "mage";

export class Piece {
  type: PieceType;
  level: number;
  hp: number;
  attack: number;
  owner: number; // 1 –∏–ª–∏ 2 - –∏–≥—Ä–æ–∫

  constructor(type: PieceType, owner: number) {
    this.type = type;
    this.owner = owner;
    this.level = 1;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö HP –∏ –∞—Ç–∞–∫–∏
    this.hp = 0;
    this.attack = 0;
    this.initializeStats(type);
  }

  protected initializeStats(type: PieceType) {
    if (type === "king") {
      this.hp = 30;
      this.attack = 10;
    } else if (type === "pawn") {
      this.hp = 10;
      this.attack = 5;
    } else if (type === "cannon") {
      this.hp = 10;
      this.attack = 5;
    } else if (type === "knight") {
      this.hp = 15;
      this.attack = 7;
    } else if (type === "archer") {
      this.hp = 12;
      this.attack = 6;
    } else if (type === "mage") {
      this.hp = 5;
      this.attack = 3;
    }
  }

  // –≠—Ç–∏ –º–µ—Ç–æ–¥—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö
  getPossibleMoves(
    board: (Piece | null)[][],
    position: BoardPosition
  ): BoardPosition[] {
    return [];
  }

  getPossibleAttacks(
    board: (Piece | null)[][],
    position: BoardPosition
  ): BoardPosition[] {
    return [];
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ç–∞–∫–∏
  // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —Ü–µ–ª—å –±—ã–ª–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞ (HP <= 0), false –∏–Ω–∞—á–µ
  // –î–ª—è –∑–∞–º–∫–æ–≤, –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–æ–ª–±—ç–∫
  attackTarget(
    attackerPos: BoardPosition,
    defenderPos: BoardPosition,
    boardPieces: (Piece | null)[][], // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ—Å–∫–µ
    castleHP: { [key: number]: number },
    castlePos: { [key: number]: BoardPosition }
  ): boolean {
    const defender = boardPieces[defenderPos.y][defenderPos.x];

    if (defender && defender.owner !== this.owner) {
      const damage = this.calculateDamage(attackerPos, defenderPos, defender);
      defender.hp -= damage;
      if (defender.hp <= 0) {
        boardPieces[defenderPos.y][defenderPos.x] = null; // <-- –ó–¥–µ—Å—å —É–¥–∞–ª—è–µ–º —Ñ–∏–≥—É—Ä—É —Å –¥–æ—Å–∫–∏
        if (defender.type === "king") {
          alert(`üëë –ò–≥—Ä–æ–∫ ${this.owner} –ø–æ–±–µ–¥–∏–ª, —É–±–∏–≤ –∫–æ—Ä–æ–ª—è!`);
          return true; // –ö–æ—Ä–æ–ª—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω, –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞
        }
        return false; // –§–∏–≥—É—Ä–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞
      }
    } else if (
      (defenderPos.x === castlePos[1].x &&
        defenderPos.y === castlePos[1].y &&
        this.owner !== 1) ||
      (defenderPos.x === castlePos[2].x &&
        defenderPos.y === castlePos[2].y &&
        this.owner !== 2)
    ) {
      // –ê—Ç–∞–∫–∞ –∑–∞–º–∫–∞
      const targetCastleOwner =
        defenderPos.x === castlePos[1].x && defenderPos.y === castlePos[1].y
          ? 1
          : 2;
      castleHP[targetCastleOwner] -= this.attack;
      if (castleHP[targetCastleOwner] <= 0) {
        alert(
          `üî• –ò–≥—Ä–æ–∫ ${this.owner} –ø–æ–±–µ–¥–∏–ª, —É–Ω–∏—á—Ç–æ–∂–∏–≤ –∑–∞–º–æ–∫ –∏–≥—Ä–æ–∫–∞ ${targetCastleOwner}!`
        );
        return true; // –ó–∞–º–æ–∫ —É–Ω–∏—á—Ç–æ–∂–µ–Ω
      }
    }
    return false; // –¶–µ–ª—å –Ω–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–Ω–∞, –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—É—à–∫–∏)
  protected calculateDamage(
    attackerPos: BoardPosition,
    defenderPos: BoardPosition,
    defender: Piece
  ): number {
    return this.attack;
  }
}

export type { BoardPosition };
