import { Piece, type BoardPosition } from "../Piece";

export class Mage extends Piece {
  constructor(owner: number) {
    super("mage", owner);
  }

  getPossibleMoves(
    board: (Piece | null)[][],
    position: BoardPosition
  ): BoardPosition[] {
    // –ú–∞–≥ —Ö–æ–¥–∏—Ç –∫–∞–∫ –∫–æ—Ä–æ–ª—å, –Ω–∞ 1 –∫–ª–µ—Ç–∫—É –≤ –ª—é–±–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    const moves: BoardPosition[] = [];
    for (let dy = -1; dy <= 1; dy++) {
      for (let dx = -1; dx <= 1; dx++) {
        if (dx === 0 && dy === 0) continue; // –ù–µ —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è

        const nx = position.x + dx;
        const ny = position.y + dy;

        if (nx >= 0 && nx < board[0].length && ny >= 0 && ny < board.length) {
          if (board[ny][nx] === null || board[ny][nx]?.owner !== this.owner) {
            moves.push({ x: nx, y: ny });
          }
        }
      }
    }
    return moves;
  }

  getPossibleAttacks(
    board: (Piece | null)[][],
    position: BoardPosition
  ): BoardPosition[] {
    const attacks: BoardPosition[] = [];
    // –ê—Ç–∞–∫–∞ –ø–æ –ø–ª–æ—â–∞–¥–∏ 2x2 –≤ —Ä–∞–¥–∏—É—Å–µ 3 (–∏–∑–º–µ–Ω–µ–Ω–æ —Å 5 –¥–ª—è –±–æ–ª–µ–µ —Ä–∞–∑—É–º–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞, –Ω–æ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å 5)
    for (let dy = -3; dy <= 3; dy++) {
      for (let dx = -3; dx <= 3; dx++) {
        if (dx === 0 && dy === 0) continue; // –ù–µ —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è

        const distance = Math.abs(dx) + Math.abs(dy); // –ú–∞–Ω—Ö—ç—Ç—Ç–µ–Ω—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        if (distance <= 3) {
          // –†–∞–¥–∏—É—Å –∞—Ç–∞–∫–∏
          const nx = position.x + dx;
          const ny = position.y + dy;

          if (nx >= 0 && nx < board[0].length && ny >= 0 && ny < board.length) {
            attacks.push({ x: nx, y: ny });
          }
        }
      }
    }
    return attacks;
  }

  // –ú–∞–≥ –∞—Ç–∞–∫—É–µ—Ç –∫—Ä–µ—Å—Ç–∏–∫–æ–º
  attackTarget(
    attackerPos: BoardPosition,
    defenderPos: BoardPosition,
    boardPieces: (Piece | null)[][],
    castleHP: { [key: number]: number },
    castlePos: { [key: number]: BoardPosition }
  ): boolean {
    let kingKilled = false;

    // –¶–µ–ª–∏ –∞—Ç–∞–∫–∏ –º–∞–≥–∞ (–∫—Ä–µ—Å—Ç–∏–∫–æ–º –≤–æ–∫—Ä—É–≥ defenderPos)
    const attackPoints = [
      defenderPos,
      { x: defenderPos.x + 1, y: defenderPos.y },
      { x: defenderPos.x - 1, y: defenderPos.y },
      { x: defenderPos.x, y: defenderPos.y + 1 },
      { x: defenderPos.x, y: defenderPos.y - 1 },
    ];

    attackPoints.forEach((point) => {
      if (
        point.x < 0 ||
        point.x >= boardPieces[0].length ||
        point.y < 0 ||
        point.y >= boardPieces.length
      )
        return;

      const target = boardPieces[point.y][point.x];
      if (target && target.owner !== this.owner) {
        target.hp -= this.attack;
        if (target.hp <= 0) {
          boardPieces[point.y][point.x] = null;
          if (target.type === "king") {
            alert(`üëë –ò–≥—Ä–æ–∫ ${this.owner} –ø–æ–±–µ–¥–∏–ª, —É–±–∏–≤ –∫–æ—Ä–æ–ª—è!`);
            kingKilled = true;
          }
        }
      }
      // –ú–∞–≥ —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å –∑–∞–º–∫–∏
      else if (
        (point.x === castlePos[1].x &&
          point.y === castlePos[1].y &&
          this.owner !== 1) ||
        (point.x === castlePos[2].x &&
          point.y === castlePos[2].y &&
          this.owner !== 2)
      ) {
        const targetCastleOwner =
          point.x === castlePos[1].x && point.y === castlePos[1].y ? 1 : 2;
        castleHP[targetCastleOwner] -= this.attack;
        if (castleHP[targetCastleOwner] <= 0) {
          alert(`üî• –ò–≥—Ä–æ–∫ ${this.owner} –ø–æ–±–µ–¥–∏–ª, —É–Ω–∏—á—Ç–æ–∂–∏–≤ –∑–∞–º–æ–∫ –∏–≥—Ä–æ–∫–∞ ${targetCastleOwner}!`);
          kingKilled = true; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã
        }
      }
    });
    return kingKilled;
  }
}